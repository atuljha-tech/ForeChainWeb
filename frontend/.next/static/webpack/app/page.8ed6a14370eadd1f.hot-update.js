"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/blockchain.js":
/*!*****************************!*\
  !*** ./utils/blockchain.js ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addReportOnChain: () => (/* binding */ addReportOnChain),\n/* harmony export */   checkWalletConnection: () => (/* binding */ checkWalletConnection),\n/* harmony export */   getAllReportsFromChain: () => (/* binding */ getAllReportsFromChain),\n/* harmony export */   getContractInfo: () => (/* binding */ getContractInfo),\n/* harmony export */   getCurrentAccount: () => (/* binding */ getCurrentAccount),\n/* harmony export */   getReportCount: () => (/* binding */ getReportCount),\n/* harmony export */   initializeBlockchain: () => (/* binding */ initializeBlockchain),\n/* harmony export */   switchToLocalNetwork: () => (/* binding */ switchToLocalNetwork)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n\n// Contract address - USE EXACT ADDRESS FROM DEPLOYMENT\nconst CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n// Contract ABI\nconst CONTRACT_ABI = [\n    \"function addReport(string memory filename, string memory uploader, string memory hash) public\",\n    \"function getAllReports() public view returns (tuple(string filename, string uploader, string hash, address uploaderAddress)[])\",\n    \"function reportCount() public view returns (uint256)\",\n    \"function getReports() public view returns (string[] memory, string[] memory, string[] memory, address[] memory)\"\n];\nlet contract = null;\nlet signer = null;\n// Safe blockchain initialization\nconst initializeBlockchain = async ()=>{\n    try {\n        if ( false || !window.ethereum) {\n            throw new Error('MetaMask not detected. Please install MetaMask.');\n        }\n        // Request account access\n        await window.ethereum.request({\n            method: 'eth_requestAccounts'\n        });\n        // Create provider and signer\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.BrowserProvider(window.ethereum);\n        signer = await provider.getSigner();\n        // Get network info\n        const network = await provider.getNetwork();\n        console.log('🔗 Connected to network:', network);\n        // Create contract instance\n        contract = new ethers__WEBPACK_IMPORTED_MODULE_1__.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n        console.log('✅ Blockchain initialized successfully');\n        return true;\n    } catch (error) {\n        console.error('❌ Blockchain initialization failed:', error);\n        throw error;\n    }\n};\n// Add report to blockchain\nconst addReportOnChain = async (filename, uploader, hash)=>{\n    try {\n        if (!contract) {\n            await initializeBlockchain();\n        }\n        console.log('📝 Adding report to blockchain:', {\n            filename,\n            uploader,\n            hash\n        });\n        console.log('Contract instance:', contract);\n        console.log('Contract address:', CONTRACT_ADDRESS);\n        console.log('Signer:', signer);\n        // Debug: Check if the function exists\n        console.log('addReport function exists:', typeof contract.addReport);\n        // Send transaction\n        const transaction = await contract.addReport(filename, uploader, hash, {\n            gasLimit: 300000\n        });\n        console.log('📤 Transaction submitted:', transaction.hash);\n        // Wait for confirmation\n        const receipt = await transaction.wait();\n        console.log('✅ Transaction confirmed in block:', receipt.blockNumber);\n        return {\n            success: true,\n            transactionHash: transaction.hash,\n            blockNumber: receipt.blockNumber,\n            message: \"Report successfully stored on blockchain!\"\n        };\n    } catch (error) {\n        console.error('❌ Add report failed:', error);\n        console.error('Error details:', {\n            code: error.code,\n            message: error.message,\n            stack: error.stack\n        });\n        // User-friendly error messages\n        if (error.code === 4001) {\n            throw new Error('Transaction was cancelled. Please click \"Confirm\" to proceed.');\n        } else if (error.message.includes('insufficient funds')) {\n            throw new Error('Insufficient test ETH. Please import Hardhat accounts to MetaMask.');\n        } else if (error.message.includes('reverted')) {\n            throw new Error('Contract execution failed. Please check contract state.');\n        } else {\n            throw new Error(\"Blockchain error: \".concat(error.message));\n        }\n    }\n};\n// Get all reports from blockchain\nconst getAllReportsFromChain = async ()=>{\n    try {\n        if (!contract) {\n            await initializeBlockchain();\n        }\n        console.log('📋 Fetching reports from blockchain...');\n        const reports = await contract.getAllReports();\n        console.log(\"✅ Found \".concat(reports.length, \" reports on blockchain\"));\n        return reports.map((report, index)=>({\n                id: index,\n                filename: report.filename,\n                uploader: report.uploader,\n                hash: report.hash,\n                uploaderAddress: report.uploaderAddress,\n                isOnChain: true,\n                timestamp: Date.now()\n            }));\n    } catch (error) {\n        console.error('❌ Get reports failed:', error);\n        return []; // Safe empty fallback\n    }\n};\n// Get report count\nconst getReportCount = async ()=>{\n    try {\n        if (!contract) {\n            await initializeBlockchain();\n        }\n        const count = await contract.reportCount();\n        return parseInt(count);\n    } catch (error) {\n        console.error('Get report count failed:', error);\n        return 0;\n    }\n};\n// Check wallet connection\nconst checkWalletConnection = async ()=>{\n    if ( true && window.ethereum) {\n        try {\n            const accounts = await window.ethereum.request({\n                method: 'eth_accounts'\n            });\n            return accounts.length > 0;\n        } catch (error) {\n            console.error('Check wallet connection failed:', error);\n            return false;\n        }\n    }\n    return false;\n};\n// Get current account\nconst getCurrentAccount = async ()=>{\n    if ( true && window.ethereum) {\n        try {\n            const accounts = await window.ethereum.request({\n                method: 'eth_accounts'\n            });\n            return accounts[0] || null;\n        } catch (error) {\n            console.error('Get current account failed:', error);\n            return null;\n        }\n    }\n    return null;\n};\n// Switch to local network\nconst switchToLocalNetwork = async ()=>{\n    try {\n        await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [\n                {\n                    chainId: '0x7A69'\n                }\n            ]\n        });\n        return true;\n    } catch (error) {\n        // If network doesn't exist, add it\n        if (error.code === 4902) {\n            try {\n                await window.ethereum.request({\n                    method: 'wallet_addEthereumChain',\n                    params: [\n                        {\n                            chainId: '0x7A69',\n                            chainName: 'Hardhat Local',\n                            rpcUrls: [\n                                'http://localhost:8545'\n                            ],\n                            nativeCurrency: {\n                                name: 'Ethereum',\n                                symbol: 'ETH',\n                                decimals: 18\n                            }\n                        }\n                    ]\n                });\n                return true;\n            } catch (addError) {\n                console.error('Failed to add local network:', addError);\n                return false;\n            }\n        }\n        console.error('Failed to switch network:', error);\n        return false;\n    }\n};\n// Get contract info\nconst getContractInfo = ()=>{\n    return {\n        address: CONTRACT_ADDRESS,\n        isInitialized: contract !== null,\n        network: 'localhost'\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/blockchain.js\n"));

/***/ })

});