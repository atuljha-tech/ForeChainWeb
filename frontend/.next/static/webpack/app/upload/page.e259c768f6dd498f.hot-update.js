"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/upload/page",{

/***/ "(app-pages-browser)/./utils/blockchain.js":
/*!*****************************!*\
  !*** ./utils/blockchain.js ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addReportOnChain: () => (/* binding */ addReportOnChain),\n/* harmony export */   checkWalletConnection: () => (/* binding */ checkWalletConnection),\n/* harmony export */   getAllReportsFromChain: () => (/* binding */ getAllReportsFromChain),\n/* harmony export */   getContractAddress: () => (/* binding */ getContractAddress),\n/* harmony export */   initializeBlockchain: () => (/* binding */ initializeBlockchain),\n/* harmony export */   setContractAddress: () => (/* binding */ setContractAddress)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n\n// Local Hardhat network setup\nconst LOCAL_PROVIDER_URL = 'http://localhost:8545';\n// Contract address - Use the exact address from deployment\nlet CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93f642f64180aa3\";\n// CORRECT ABI that matches your contract\nconst CONTRACT_ABI = [\n    \"function addReport(string memory filename, string memory uploader, string memory hash) public\",\n    \"function getAllReports() public view returns (tuple(string filename, string uploader, string hash, address uploaderAddress)[])\",\n    \"function reportCount() public view returns (uint256)\",\n    \"function getReports() public view returns (string[] memory, string[] memory, string[] memory, address[] memory)\"\n];\nlet contract = null;\nlet signer = null;\n// SIMPLIFIED address validation - remove the problematic checksum function\nconst validateAddress = (address)=>{\n    if (!address || typeof address !== 'string') {\n        throw new Error('Address must be a string');\n    }\n    if (!address.startsWith('0x')) {\n        throw new Error('Address must start with 0x');\n    }\n    if (address.length !== 42) {\n        throw new Error('Address must be 42 characters long');\n    }\n    return address;\n};\n// Safe initialization for Ethers v6\nconst initializeBlockchain = async ()=>{\n    try {\n        if ( false || !window.ethereum) {\n            throw new Error('MetaMask not detected. Please install MetaMask.');\n        }\n        // Request account access\n        await window.ethereum.request({\n            method: 'eth_requestAccounts'\n        });\n        // Create provider and signer - ETHER v6 SYNTAX\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.BrowserProvider(window.ethereum);\n        signer = await provider.getSigner();\n        // Get network to ensure we're on local\n        const network = await provider.getNetwork();\n        console.log('Connected to network:', network);\n        // Use validated address (without problematic checksum)\n        const validatedAddress = validateAddress(CONTRACT_ADDRESS);\n        console.log('Using contract address:', validatedAddress);\n        // Create contract instance\n        contract = new ethers__WEBPACK_IMPORTED_MODULE_1__.Contract(validatedAddress, CONTRACT_ABI, signer);\n        console.log('Blockchain initialized successfully');\n        return true;\n    } catch (error) {\n        console.error('Blockchain initialization failed:', error);\n        throw error;\n    }\n};\n// Safe report addition - ZERO ETH, EDUCATIONAL PURPOSE\nconst addReportOnChain = async (filename, uploader, hash)=>{\n    try {\n        if (!contract) {\n            await initializeBlockchain();\n        }\n        console.log('Adding report to blockchain:', {\n            filename,\n            uploader,\n            hash\n        });\n        // EDUCATIONAL TRANSACTION - ZERO VALUE, CLEAR PURPOSE\n        const transaction = await contract.addReport(filename, uploader, hash, {\n            value: 0,\n            gasLimit: 300000\n        });\n        console.log('Transaction submitted:', transaction.hash);\n        // Wait for confirmation\n        const receipt = await transaction.wait();\n        console.log('Transaction confirmed:', receipt);\n        return {\n            success: true,\n            transactionHash: transaction.hash,\n            blockNumber: receipt.blockNumber,\n            message: \"Educational transaction completed successfully\"\n        };\n    } catch (error) {\n        console.error('Add report failed:', error);\n        // User-friendly error messages\n        if (error.code === 4001) {\n            throw new Error('Transaction was rejected. Please click \"Confirm\" in MetaMask to continue.');\n        } else if (error.message.includes('insufficient funds')) {\n            throw new Error('Please import Hardhat test accounts to MetaMask for fake ETH.');\n        } else {\n            throw new Error(\"Blockchain error: \".concat(error.message));\n        }\n    }\n};\n// Get all reports safely\nconst getAllReportsFromChain = async ()=>{\n    try {\n        if (!contract) {\n            await initializeBlockchain();\n        }\n        // Use the simplified function\n        const reports = await contract.getAllReports();\n        return reports.map((report, index)=>({\n                id: index,\n                filename: report.filename,\n                uploader: report.uploader,\n                hash: report.hash,\n                uploaderAddress: report.uploaderAddress,\n                isOnChain: true\n            }));\n    } catch (error) {\n        console.error('Get reports failed:', error);\n        return []; // Safe fallback\n    }\n};\n// Update contract address if needed\nconst setContractAddress = (address)=>{\n    try {\n        CONTRACT_ADDRESS = validateAddress(address);\n        contract = null; // Reset to reinitialize\n        console.log('Contract address updated to:', CONTRACT_ADDRESS);\n    } catch (error) {\n        console.error('Invalid contract address:', error);\n        throw new Error('Invalid contract address format');\n    }\n};\n// Check if wallet is connected\nconst checkWalletConnection = async ()=>{\n    if ( true && window.ethereum) {\n        const accounts = await window.ethereum.request({\n            method: 'eth_accounts'\n        });\n        return accounts.length > 0;\n    }\n    return false;\n};\n// Get current contract address\nconst getContractAddress = ()=>{\n    return CONTRACT_ADDRESS;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/blockchain.js\n"));

/***/ })

});